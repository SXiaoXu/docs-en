{% set var_app_domain = '{Used Domain}' %}
{% import "views/_helper.njk" as docs %}

{% raw %}<script>$(window).load(function() {$('.do-expand-all').click();})</script>{% endraw %}
# Web Hosting Development Guide &middot; {{platformName}}


Web hosting is a sub-module of LeanEngine; it allows you to develop a web application with {{platformName}}.

It provides cloud functions and hooks, hosting for static files and custom routing. You can also bind your own domain names to the service.
You can use it to create landing/download pages for your mobile applications, develop an admin console or a complete website, or run custom logic that has to be on the server side.

If you don't know how to create a LeanEngine project, debug it locally and deploy it to the cloud, please first read [LeanEngine Quick Start](leanengine_quickstart.html). Other related documents include:

 - [LeanEngine Service Overview](leanengine_overview.html) (Overview of all features)
 - [Command Line Tool Usage Guide](leanengine_cli.html)
 - [LeanCache Usage Guide](leancache_guide.html) (using the in-memory cache service to improve performance)
 - [LeanEngine Project Examples](leanengine_examples.html)
 - [LeanEngine FAQs](leanengine_faq.html)

This document uses {{platformName}} as an example, but LeanEngine supports many other languages. You can choose the technology stack you are familiar with for development:

- [Node.js](leanengine_webhosting_guide-node.html)
- [Python](leanengine_webhosting_guide-python.html)
- [PHP](leanengine_webhosting_guide-php.html)
- [Java](leanengine_webhosting_guide-java.html)
- [C#](leanengine_webhosting_guide-dotnet.html)


## Starting with the example project

{% block getting_started %}{% endblock %}

### Local operation and debugging

After all dependencies are installed, you can use our command-line tool in the project root directory to start a development server:


```sh
lean up
```

Please refer to the [Command Line Tool Usage Guide](leanengine_cli.html) for more on the command-line tool and local debugging.

### Deploying to the cloud


Run in your project root directory:

```sh
lean deploy
```

###  Setting up the domain name

In the "Web Hosting Domain Name" section of [LeanEngine > Settings](/cloud.html?appid={{appid}}#/conf), you can fill in a custom second-level domain name. For example, if you set `myapp`, you can access your website through our second-level domain name:

- `http://myapp.avosapps.us` (Global)
- `http://myapp.leanapp.cn` (China Region)


<div class="callout callout-info">You may need to wait a few hours till DNS settings are effective</div>

Our second-level domains support HTTPS by default.

If your app has no requests in 30 days and you haven't purchased a standard instance, the second-level domain may be recycled.

{% block runtime_description %}{% endblock %}

{% block project_constraint %}{% endblock %}

{% block custom_runtime %}{% endblock %}

{% block project_start %}{% endblock %}

{% block supported_frameworks%}{% endblock %}

{% block use_leanstorage %}{% endblock %}

## Health monitoring

When your application is deployed, LeanEngine's hypervisor will check if it is started successfully every second. The deployment is considered a failure if the check still fails after 30 seconds. After the application starts running normally, regular health monitoring ensures that your app is healthy. And if health monitoring fails, the LeanEngine hypervisor will automatically restart your app.

The URL for health monitoring includes the root path of your application(`/`) and `/__engine/1/ping` which is normally handled by the {{platformName}}. As long as  **one of the two** returns a HTTP response code of 200, the application is considered healthy. So make sure your program uses the {{platformName}} SDK, or your app root path returns 200 as the HTTP status code.
In addition, in order to support cloud functions and hooks in LeanEngine, the hypervisor will use the URL `/1.1/functions/_ops/metadatas` to communicate with the {{platformName}} SDK. Please the {{platformName}} SDK handle this path, or return 404 as the HTTP response code to indicate that cloud functions and hooks are not used.

{% block ping %}
Please refer to the previous section [Using data storage service](#Using data storage service) for how to install and use the {{platformName}} SDK,
{% endblock %}

{% block generalFeature %}

## Session management

{% block cookie_session %}{% endblock %}

## Implementing common features

### Sending HTTP request

{% block http_client %}{% endblock %}

### Obtaining client IP

If you want to get the client's IP, you can get it directly from the `x-real-ip` HTTP header.

{% block code_get_client_ip_address %}{% endblock %}

### Uploading files
Websites hosted on {{productName}} can handle file uploads using the file-related API in the {{sdk_name}} SDK.

Assuming the front-end HTML code is like:

```html
<form enctype="multipart/form-data" method="post" action="/upload">
  <input type="file" name="iconImage">
  <input type="submit" name="submit" value="submit">
</form>
```

{% block upload_file_special_middleware %}{% endblock %}

Next, define the handler function, build a Form object, and parse req as a parameter, it will save the uploaded file to the temporary directory, and construct the file object:

{% block code_upload_file_sdk_function %}{% endblock %}

### Session
{% block custom_session %}
{{platformName}} Not supported yet
{% endblock %}

### CSRF Token
If your LeanEngine application uses cookies as an authentication method (for example, using the SDK's CookieSession middleware); then there is a risk of [CSRF](https://github.com/pillarjs/understanding-csrf) attack. It will allow other sites to forge malicious requests with valid cookies.

CSRF tokens are usually used to defend against CSRF attacks. You need to pass a random string (the CSRF token, which can be passed in the cookie) to the client. The client must include the CSRF token in the request body or in the header. The server verifies that the CSRF Token is correct.

{% block csrf_token %}{% endblock %}

{% endblock %}

### LeanCache

[LeanCache](http://localhost:9000/leancache_guide.html) is a cache service provided by LeanCloud for high-traffic sites.

{% block leancache %}{% endblock %}

For more instruction on how to use LeanCache, see the [LeanCache Usage Guide](leancache_guide.html).

### Redirecting to HTTPS


For security consideration, it is recommended that all sites use HTTPS by default. We provide full support for HTTPS.

There is a middleware in {{productName}} to force your website `{{var_app_domain}}.leanapp.cn` to be accessed via https. All you have to do is to add it:

{% block https_redirect %}{% endblock %}

When a user accesses your site with HTTP, she will be redirected to the HTTPS URL.

{% block extra_examples %}{% endblock %}

## Deploying and publishing

### Deploying with the commandline tool

Run in you project root directory:

```sh
lean deploy
```

The command line tool makes it easy to deploy, publish, view application status, view logs, and even support multiple application deployments. Please refer to the [Command Line Tool Guide](leanengine_cli.html) for specific usage.

### Dependency cache

LeanEngine implements a caching mechanism to speed up the build process. The build process the installs dependencies for your project. For each new build, if the dependencies are not changed, the dependencies installed last time are used. Only the application code is replaced.

{% block depentencyCache %}{% endblock %}

If you are encountering problems with installing dependencies, you can enable the "Download latest dependencies" option when deploying from the web console, or add the `--no-cache` option when deploying with the command line tool.

```sh
lean deploy --no-cache
```

Dependency caching might fail for a number of reasons. Therefore, it is not guaranteed that the cache is utilized for each eligible build.

### Deploying from Git repo

You can also deploy from your Git repository. You need to push the project to a git repository. Good third-party services that provide Git hosting include [GitHub](https://github.com/), [BitBucket](https://bitbucket.com/), and [Gitlab](http://gitlab.org/).

After you push your code to a repository accessible from the Internet, please fill in the repo URL in LeanEngine settings in the developer console. If it is a public repository and has an HTTPS URL, it is preferred: `https://github.com/<username>/<repoName>.git`.

If the repo is not accessible through HTTPS, you need to fill in the ssh address `git&commat;github.com:&lt;USERNAME&gt;/&lt;REPO-NAME&gt;.git`. If it is a private repo, you also need to add the deploy key to your repo (shown in LeanEngine settings in the developer console) and give it read access. For example, on GitHub you can add deploy keys in the project's Settings => Deploy keys.

After the setup, you can deploy from the web in the developer console.
By default, it will deploy the code of the master branch. You can also fill in another branch name,a label or a specific commit hash.

### Preparatory environment and production environment
By default, LeanEngine only has one "production environment" and the corresponding domain name is `{{var_app_domain}}.leanapp.cn`. There is a "trial instance" in the production environment to run the application.

When the experience example of the production environment is upgraded to "Standard example", there will be an additional "preparation environment" with corresponding domain name `stg-{{var_app_domain}}.leanapp.cn`, both environments access the same data. You can test your LeanEngine code with the prepared environment. Each time you modify it, you can deploy it to the prepared environment first. After the test is passed, you can publish it to the production environment. If you want to have a test environment with an independent data source, it is recommended to create an application separately.

<div class="callout callout-info"> If you encounter an "Application not Found" error when access LeanEngine, it is usually because the corresponding environment has not yet being deployed the code. For example, an application may not have a preparation environment, or the application has not yet released code to the production environment. </div>

Sometimes you may need to know what environment the current LeanEngine is running in (development, pre- or production) and then do different operations:

{% block get_env %}{% endblock %}

Client-end sdk has methods similiar to `setProduction` , for example [AV.setProduction(production) of JavaScript SDK API](leanengine_cloudfunction_guide-node.html#hash1210911107). If the `production` here is set to `0` ,then the SDK will request a preparation environment; if set to `1` , it will request the production environment. The default setting is `1`.

## Cloud environment

### System level dependency

System-level dependencies refer to some common functional modules on the operating system during an operating process, such as [ffmpeg](https://www.ffmpeg.org/). If you need to use the current project, just add The system dependencies section  in the `leanengine.yaml` file, you can specify the required system dependencies, similar to:

```yaml
systemDependencies:
  - imagemagick
```

Currently supported options include:

- `ffmpeg`An audio and video processing tool library
- `imagemagick` An image processing tool library
- `fonts-wqy`  Wenquanyi Bitmap song, Wenquanyi Micro black, usually cooperate with phantomjs to display Chinese character.
- `phantomjs` A Webkit Browser without UI.

Note ** System-level dependent Function modules will not add by default**, adding system dependencies will slow down the deployment, so please don't add unused dependencies.


###  Environmental variable

The LeanEngine platform provides the following environment variables by default:

Variable name|explanation
---|---
`LEANCLOUD_APP_ID`| Current used APP ID
`LEANCLOUD_APP_KEY`| Current used APP key
`LEANCLOUD_APP_MASTER_KEY`|Current used Master Key
`LEANCLOUD_APP_ENV`| Current application environemnt <ul><li>The development environment does not have this environment variable, or the value of `development` (generally referred to as local development)</li> </li><li>Preparation environment value is `stage`</li><li>Production environment value is `production`</li></ul>
`LEANCLOUD_APP_PORT`|The port that the current application is open to the external network, only by listening this port can the user access you service.
`LEANCLOUD_API_SERVER`| The address used to access the storage service (similar to `https://api.leancloud.cn`). This value can vary depending on reasons like your data center, etc.. So use this value of this environment variable when requesting storage services or LeanCloud other services using the REST API. In LeanEngine ** Do not use `https://api.leancloud.cn` directly
`LEANCLOUD_AVAILABLE_CPUS`|The number of CPUs available for the LeanEngine instance, this value is greater than 1 for high-spec instances (e.g. 2CPU 1024MB memory). The application can start a corresponding number of threads or processes based on this value. In LeanEngine ** Do not ** directly use the operating system CPU core, otherwise it may start too many processes and cause the exception to exit because it exceeds the instance specification.
`LEANCLOUD_APP_GROUP`|The group in which the LeanEngine instance is located. When using the LeanEngine [Group Management](leanengine_plan.html#Group Management) feature, this value is the name of the group.
`LEANCLOUD_REGION`|The area where LeanEngine service is located, the value of {% if node != 'qcloud' %} is `CN` or `US`, which represents domestic node and the US node respectively. {% else %} currently only supports `CN` or Chinese nodes. {% endif %}

<div class="callout callout-info">Environment variables (such as `LC_APP_ID`) that are used by older LeanEngines starting with `LC_` have been abandoned. To ensure code compatibility, the `LC_` variable is still valid for a period of time but may fail completely in the future. To avoid errors, it is recommended to use the `LEANCLOUD_` variable instead. </div>
You can also add custom environment variables to the [LeanEngine > Settings > Custom Environment Variables](/dashboard/cloud.html?appid={{appid}}#/conf) page. The names of the varaibles must be a letter, a number, an underscore, and begin with a letter. The value must be a string. The environment variable will be modified and will take effect the next time it is deployed.

According to general practice, some configuration items can be stored in environment variables. In this way, the environment variables can be modified and redeployed to change the behavior of the program without modifying the code, or you can store some Secret Key provided by third-party services in the environment variables so that these secret keys won't appear directly in the code.

{% block code_calling_custom_variables %}{% endblock %}

{% call docs.alertWrap() %}
The environment variable provided by default by LeanEngine{% if platformName | lower == 'node.js' %} (and Node.js environment variable `NODE_ENV`){% endif %} cannot be overwritten by custom environment variables (override) invalid).

{% endcall %}

### Load balancing

On LeanEngine, the user's request goes through a load balancing component before reaching your app. The load balancing component handles the general work of HTTPS encryption, compression of responses, etc., so you don't have to add HTTPS or gzip-related functionality to your app.

Load balancing also limits the request to no more than 100M (including direct upload files to LeanEngine), request processing cannot exceed 60 seconds, WebSocket 60 seconds without data will be disconnected.

### File System

You can write temporary files to the `/home/leanengine` or `/tmp` directory, up to 1G.

Each time LeanEngine is deployed, a new container is created. Even if it is not deployed. The system occasionally performs some automatic scheduling, which means that **you can't treat the local file system as a persistent storage**, only for temporary use storage.

If the files you write in are large, it is recommended to delete them automatically after use. Otherwise, if you take up more than 1G of disk space, you may receive errors similar to `Disk quota exceeded` if you continue to write files in. In this case, you can re- Deploy it so that the file will be emptied.

### Log

In the [LeanEngine/Logs](/cloud.html?appid={{appid}}#/log) of the console, you can view LeanEngine's deployment and running logs , and you can also filter them by the log levels.

You can also [export via command line tool](leanengine_cli.html#View Log) to save the last seven days of logs to local files for further analysis and statistics.

The application log can be directly output to "standard output" or "standard error". The information will correspond to the level of`info` and `error` of the log. For example, the following code will record the parameter information at the info level:
{% block loggerExample %}{% endblock %}

<div class="callout callout-info">The log line has a maximum of 4096 characters, and the extra portion is discarded; the log output frequency is greater than 600 lines/minute, and the extra section will be discarded. </div>

{% block loggerExtraDescription %}{% endblock %}

LeanEngine's access log (Access Log) can be exported from [App Console > LeanEngine > Access Log](/cloud.html?appid={{appid}}#/accesslog), you can download the packaged logs via the console.

### Time zone

In the China region, China standard time (`Asia/Shanghai`) is used by default. And the US region uses UTC time by default.

{% block section_timezone %}{% endblock %}

### Gateway IP address

If the developer wants to configure the IP whitelist on a third-party service platform (such as WeChat Open Platform) and needs to obtain the LeanEngine portal or egress IP address, go to [Control Panel > LeanEngine > Settings > Portal IP](/dashboard/ Cloud.html?appid={{appid}}#/conf) to self-check.

We will minimize the frequency of changes in the IP of the gateway as much as possible, but the possibility of a sudden IP change still exists. Therefore, in the case of problems related to the IP of the portal, we recommend entering the console to check if the IP list has changed.

## Custom domain names

We recommend that you register your own domain name and bind it to your LeanEngine production environment.

If you need to bind your own domain name, go to [App Console > Account Settings > Domain Binding](/settings.html#/setting/domainbind) and follow the steps to fill in the information.
